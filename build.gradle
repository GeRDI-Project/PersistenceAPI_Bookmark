/**
 * Copyright 2018 Nelson Tavares de Sousa
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'pmd'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
 
 	// MongoDB Java Client   
    compile 'org.mongodb:mongo-java-driver:3.6.1'
    
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // Sparkjava
    compile 'com.sparkjava:spark-core:2.7.1'
    
    // Logging
    compile 'ch.qos.logback:logback-classic:1.2.3'
    
    // Elasticsearch REST High Level Client
    compile 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.3.1'
    
    // GSON
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

    compile 'org.pac4j:spark-pac4j:3.0.0'
    compile 'org.pac4j:pac4j-http:3.6.1'
    compile 'org.pac4j:pac4j-jwt:3.6.1'
    compile 'org.pac4j:pac4j-core:3.6.1'
    
}

jar {
	manifest {
        attributes 'Implementation-Title': 'Bookmark Persistence API',
        			'Main-Class': 'de.gerdiproject.bookmark.backend.PersistenceApiService'
    }
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } 
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
}



pmd {
    pmdTest.enabled=true
    ruleSetFiles = files('quality/pmd-ruleset.xml')
}