# Copyright 2018 Nelson Tavares de Sousa ntd@informatik.uni-kiel.de
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
swagger: "2.0"
info:
  description: "This service provides persistance capabilities for GeRDI Bookmark Collections through basic CRUD operations."
  version: "1.0.0"
  title: "Bookmark Persistance API"
  contact:
    email: "ntd@informatik.uni-kiel.de"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "bookmark.gerdi.org"
basePath: "/api/v1/collections"
schemes:
- "http"
- "https"
paths:
  /{userId}:
    get:
      summary: "Get Collections"
      description: "Returns a list of Collections owned by the user."
      operationId: "getCollectionsByUserId"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user's unique identifier."
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/CollectionsResponse"
    post:
      summary: "Create new Collection"
      description: "Creates a new Collection for the given user."
      operationId: "createCollection"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user's unique identifier."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Collection with a name and a list of document ids."
        required: true
        schema:
          $ref: "#/definitions/CollectionRequest"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/CreationSuccessfulResponse"
        400:
          description: "Could not create Collection due to unknown documents."
          schema:
            $ref: "#/definitions/CreationFailedResponse"
  /{userId}/{collectionId}:
    get:
      summary: "Get metadata documents"
      description: "Returns a Collection, containing its list of metadata documents."
      operationId: "getCollectionById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user's unique identifier."
        required: true
        type: "string"
      - name: "collectionId"
        in: "path"
        description: "The Collection's unique identifier."
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MetadataListResponse"
    put:
      summary: "Create or update a Collection"
      description: "Creates or updates a Collection for the given user with the given collection id. Should be used for updates only!"
      operationId: "updateCollection"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user's unique identifier."
        required: true
        type: "string"
      - name: "collectionId"
        in: "path"
        description: "The collection's unique identifier."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Collection with a name and a list of document ids."
        required: true
        schema:
          $ref: "#/definitions/CollectionRequest"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/CreationSuccessfulResponse"
        400:
          description: "Could not create Collection due to unknown documents."
          schema:
            $ref: "#/definitions/CreationFailedResponse"
    delete:
      summary: "Delete given Collection"
      description: "Deletes the given Collection owned by the specified user."
      operationId: "deleteCollection"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user's unique identifier."
        required: true
        type: "string"
      - name: "collectionId"
        in: "path"
        description: "The collection's unique identifier."
        required: true
        type: "string"
      responses:
        202:
          description: "Successful operation"
          schema:
              $ref: "#/definitions/DeletionResponse"
definitions:
  CreationSuccessfulResponse:
    type: "object"
    properties:
      message:
        type: "string"
      collectionId:
        type: "string"
      acknowledged:
        type: "boolean"
    required:
      - "message"
      - "collectionId"
      - "acknowledged"
  CreationFailedResponse:
    type: "object"
    properties:
      message:
        type: "string"
      docs:
        type: "array"
        items:
          type: "string"
      acknowledged:
        type: "boolean"
        default: false
    required:
      - "message"
      - "docs"
      - "acknowledged"
  DeletionResponse:
    type: "object"
    properties:
      acknowledged:
        type: "boolean"
    required:
      - "acknowledged"
  MetadataListResponse:
    type: "array"
    items:
      type: "object"
      properties:
        _source:
          type: "object"
        _id:
          type: "string"
      required:
        - "_id"
        - "_source"
  CollectionsResponse:
    type: "array"
    items:
      type: "object"
      properties:
        name:
          type: "string"
        _id:
          type: "string"
      required:
        - "_id"
  CollectionRequest:
    type: "object"
    properties:
      name:
        type: "string"
      docs:
        type: "array"
        items:
          type: "string"
    required:
      - "docs"
